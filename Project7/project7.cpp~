/*
Name: Dominic MacIsaac
Class: CPSC 122, Section 1
Date Submitted: 2/20/2021
Assignment: Project 7                                      
Description: Generates a encrypt key and decrypt key in a keyfile, encrypts a plain text, and decrypts a cipher text using the Transposition Cipher
Notes: Have A Lovely Day Graders!
*/

#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <cmath>
#include <iomanip>


using namespace std;

void fileControl (string keyFile, string fileIn, string fileOut, int mode);
void fileOpen(fstream& file, string name, char mode);
void keyGen(string);
char transform(char ch, int encDec[]);

int main(int argc, char* argv[])
{
  int mode = atoi(argv[1]);
  
  if(mode == 0)
  {
    keyGen(argv[2]);
  }
  if(mode == 1)
  {
    fileControl(argv[2], argv[3], argv[4], 1);
  }
  if(mode == 2)
  {
    fileControl(argv[2], argv[3], argv[4], 2);
  }

  return 0;
}

/*
Description: invokes fileOpen on all files.  closes all files.  Reads key file. Constructs arrays for encrypt/decryption.  Reads the input file and either invokes encrypt or decrypt,  depending on the value of mode.  Writes to the output file. 
Input: names of key file, input file and output file. mode value of 1 or 2
Output: writes to the output file
*/

void fileControl (string keyFile, string fileIn, string fileOut, int mode)
{
  fstream finKey, fin, fout;
  int encryptKey[26] = {0}, decryptKey[26] = {0};
  char temp = ' ';
  
  fileOpen(finKey, keyFile, 'r');
  for(int i = 0; i < 26; i++)
  {
    finKey >> encryptKey[i];
  }
  for(int i = 0; i < 26; i++)
  {
    finKey >> decryptKey[i];
  }
  finKey.close();
  
  fileOpen(fin, fileIn, 'r');
  fileOpen(fout, fileOut, 'w');
  
  while(fin.peek() != EOF)
  {
    temp = fin.get();
    temp = toupper(temp);
    if(temp > 64 && temp < 91) // only decrypt if it is a letter
    {
    	if(mode == 1)
    	{
        fout.put(transform(temp, encryptKey));
      }
      if(mode == 2)
    	{
        fout.put(transform(temp, decryptKey));
      }
    }
    else
    {
      fout.put(temp);
    }
  }
  
  fin.close();
  fout.close();
  
  return;
}
    
/*
Description: function opens a file
Input: file stream object reference, name of the file, mode of open
Output: input file name is opened. 
*/
void fileOpen(fstream& file, string name, char mode)
{
  string fileType;

  if (mode == 'r')
    fileType = "input";
  if (mode == 'w')
    fileType = "output";

  if (mode == 'r')
    file.open(name, ios::in);  //available thorugh fstream
  if (mode == 'w')
    file.open(name, ios::out);  //available through fstream;
 
  if (file.fail()) //error condition 
  {
    cout << "Error opening " << fileType << " file" << endl; 
    exit(EXIT_FAILURE);
  }
}

/*
Description: Opens key file for writing.  Generates and stores encrypt and decrypt keys in the key file.   This can be stored any way that you like as long as two 2-D arrays can be constructed from the file, one for encryption and one for decryption. 
Input: name of the file in which to store generated keys
Output: file holds generated encryption and decryption keys 
*/

void keyGen(string keyFile)
{
  bool validate[26] = {false};
  bool isFound = false;
  int encryptKey[26] = {0}, decryptKey[26] = {0};
  int temp = 0, pos = 0;
  
  fstream keyF;
  fileOpen(keyF, keyFile, 'w');
  
  //encrypt key
  for(int i = 0; i < 26; i++)
  {
    srand(time(NULL));
    isFound = false;
    while(isFound == false)
    {
      temp = rand() % 26;
      if(validate[temp] == false)
      {
        validate[temp] = true;
        encryptKey[i] = temp;
        keyF << temp << endl;
        isFound = true;
      }
    }
  }
  
  //decrypt key
  for(int i = 0; i < 26; i++)
  {
    isFound = false;
    pos = 0;
    while(isFound == false)
    {
      if(encryptKey[pos] == i)
      {
        keyF << pos << endl;
        isFound = true;
      }
      pos++;
    }
  }
  
  return;
}

/*
Description: Encrypts/Decrypts an upper case alphabetic character using the transposition cipher. Operation depends on whether it is sent the encrypt or decrypt key
Input: upper case alphabetic character, encryption or decryption array
Returns: encrypted or decrypted  version of ch
*/
char transform(char ch, int encDec[])
{
  return (65 + encDec[ch-65]);
}
