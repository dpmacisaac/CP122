/*
 Name: Dominic MacIsaac
 Class: CPSC 122, Section 1
 Date Submitted: 
 Assignment:  Project 5                                                
 Description: Generates a key, encrypts a plain text, and decrypts a cipher text
 Notes: 
*/

#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <cmath>
#include <iomanip>


using namespace std;

int keyGen();
char encrypt(char ch, int key);
char decrypt(char ch, int key);
void fileOpen(fstream& file, string name, char mode);
void generateKey(string);
void encryptFile(string, string, string);
void decryptFile(string, string, string);

int main(int argc, char* argv[])
{
  int mode = atoi(argv[1]);
  
  if(mode == 0)
  {
    generateKey(argv[2]);
  }
  if(mode == 1)
  {
    encryptFile(argv[2], argv[3], argv[4]);
  }
  if(mode == 2)
  {
    decryptFile(argv[2], argv[3], argv[4]);
  }

  return 0;
}

/*
Description: Write random number to file
Input: file name to store key
Output: writes a randomly generated integer in the range [1..25] to keyFile 
*/
void generateKey(string keyFileName)
{
  fstream keyF;
  fileOpen(keyF, keyFileName, 'w');
  keyF << keyGen();
  return;
}

/*
Description: Encrypts a plain text to a new file using a key
Input: key file with number, plain text, and a output file
Output: The encrypted version of the plain text to the output file
*/
void encryptFile(string keyFile, string ptFile, string encFile)
{
  fstream finKey, finPT, fout;
  int key = 0;
  char temp = ' ';
  
  fileOpen(finKey, keyFile, 'r');
  fileOpen(finPT, ptFile, 'r');
  fileOpen(fout, encFile, 'w');
  
  finKey >> key;
    
  while(finPT.peek() != EOF)
  {
    temp = finPT.get();
    temp = toupper(temp);
    if(temp > 64 && temp < 91)// only encrypt if it is a letter
    {
      fout << encrypt(temp, key);
    }
    else
    {
      fout << temp;
    }
  }
    
  return;
}

/*
Description: takes an encrypted text and uses the key to decrypt it to an outfile
Input: a keyfile, a encrypted text, an output file
Output: the decoded text to the output file
*/
void decryptFile(string keyFile, string encFile, string decFile)
{
  fstream finKey, finET, fout;
  int key = 0;
  char temp = ' ';
  
  fileOpen(finKey, keyFile, 'r');
  fileOpen(finET, encFile, 'r');
  fileOpen(fout, decFile, 'w');
  finKey >> key;
    
  while(finET.peek() != EOF)
  {
    temp = finET.get();
    temp = toupper(temp);
    if(temp > 64 && temp < 91) // only decrypt if it is a letter
    {
      fout << decrypt(temp, key);
    }
    else
    {
      fout << temp;
    }
  }
  
  return;
}


/*
Description: Randomly generates an integer in the range: [1..25]
Input: none
Output: writes a randomly generated integer in the range [1..25] 
*/
int keyGen()
{
  int key = 0;
  srand(time(NULL)); //seed the random number
  key = rand() % 25 + 1;
  
  return key;
}

/*
Description: Encrypts an upper case alphabetic character using the Caesar cipher
Input: upper case alphabetic character, valid key
Returns: encrypted version of ch
*/
char encrypt(char ch, int key)
{
  int chNum = 0,encryptVal = 0;
  char encryptCh = ' ';
  
  chNum = ch - 65;
  encryptVal = (chNum + key) % 26; //if number goes about 26, it wraps around back to 'A'
  encryptVal = encryptVal + 65;
  encryptCh = static_cast<char>(encryptVal);
  
  return encryptCh;
}

/*
Description: Decrypts an upper case alphabetic character using the Caesar cipher
Input: upper case alphabetic character, valid key
Returns: decrypted version of input
*/
char decrypt(char ch, int key)
{
  char decryptCh = ' ';
  int chNum = 0, decryptVal = 0;
  
  chNum = ch - 65; //subtracts 65 which is the first uppercase letter, making char 0 + its position in the alphabet 
  decryptVal = (chNum - key + 26) % 26; // added 26 to prevent negative values when subtracting the key
  decryptVal = decryptVal + 65;
  decryptCh = static_cast<char>(decryptVal);
  
  return decryptCh;
}

/*
Description: function opens a file
Input: file stream object reference, name of the file, mode of open
Output: input file name is opened. 
*/
void fileOpen(fstream& file, string name, char mode)
{
  string fileType;

  if (mode == 'r')
    fileType = "input";
  if (mode == 'w')
    fileType = "output";

  if (mode == 'r')
    file.open(name, ios::in);  //available thorugh fstream
  if (mode == 'w')
    file.open(name, ios::out);  //available through fstream;
 
  if (file.fail()) //error condition 
  {
    cout << "Error opening " << fileType << " file" << endl; 
    exit(EXIT_FAILURE);
  }
}
