#include <iostream>
using namespace std;

#include "2-List.h"

List::List()
{
  head = NULL;
  length = 0;
}


List::~List()
{
  while(head != NULL)
  {
    this->DeleteItemH();
  }
}

bool List::IsEmpty() const
{
  if(head != NULL)
  {
    return false;
  }
  return true;
}

int List::GetLength() const
{
  return length;
}

void List::PutItemH(const itemType newItem)
{
  node* curr = new node;
  length++;
  curr->item = newItem;
  if(head == NULL)
  {
    curr->next = NULL;
    head = curr;
  }
  else
  {
    curr->next = head;
    head = curr;
  }
}

itemType List::GetItemH() const
{
  return head->item;
}

void List::DeleteItemH()
{
  if(length == 1)
  {
    delete head;
    head = NULL;
  }
  else
  {
    node* temp;
    temp = head->next;
    delete head;
    head = temp;
  }
  length--;
}
	
void List::Print() const
{
  node* temp;
  temp = head;
  while(temp != NULL)
  {
    cout << temp->item << endl;
    temp = temp->next;
  } 

}

int List::Find(const itemType item) const
{
  int pos = 0;
  node* temp = head;
  while(temp != NULL)
  {
    if(item == temp->item)
    {
      return pos;
    }
    temp = temp->next;
    pos++;
  } 
  return -1;
}

void List::DeleteItem(const int pos)
{
  if(length == 1 || pos == 0)
  {
    this->DeleteItemH();
    return;
  }
  
  node* prev = head;
  node* curr = head;
  node* after = NULL;
  
  for(int i = 0; i<pos; i++)
  {
    prev = curr;
    curr = curr->next;
  }
  
  after = curr->next;
  prev->next = after;
  delete curr;
  length--;
  
  return;
}

